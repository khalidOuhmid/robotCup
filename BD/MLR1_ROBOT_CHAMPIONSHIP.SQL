/* ----------------------------------------------------------------------------- 
      
			Génération d'une base de données pour
					MySQL



	Projet : SAE S3.01 - Robot Championship
	Date de dernière modification : 10/01/2025
	Auteur : Isadora Bézie

	A copier dans phpMyAdmin - dans sa propre base (ex : etu_ibezie)


----------------------------------------------------------------------------- */

-- Create T_CHAMPIONSHIP_CHP table
CREATE TABLE T_CHAMPIONSHIP_CHP (
    CHP_ID SMALLINT AUTO_INCREMENT,
    CMP_ID SMALLINT NOT NULL,
    PRIMARY KEY (CHP_ID)
);

-- Create T_TEAM_TEM table
CREATE TABLE T_TEAM_TEM (
    TEM_ID SMALLINT AUTO_INCREMENT,
    USR_ID SMALLINT NOT NULL,
    CMP_ID SMALLINT NOT NULL,
    TEM_NAME CHAR(32) NOT NULL,
    TEM_STRUCT CHAR(32) NULL,
    TEM_CREATION_DATE DATETIME NOT NULL,
    PRIMARY KEY (TEM_ID)
);

-- Create T_COMPETITION_CMP table
CREATE TABLE T_COMPETITION_CMP (
    CMP_ID SMALLINT AUTO_INCREMENT,
    CMP_ADDRESS CHAR(255) NULL,
    CMP_DATE_BEGIN DATETIME NOT NULL,
    CMP_DATE_END DATETIME NOT NULL,
    CMP_NAME CHAR(32) NOT NULL,
    CMP_DESC CHAR(255) NULL,
    PRIMARY KEY (CMP_ID)
);

-- Create T_TOURNAMENT_TNM table
CREATE TABLE T_TOURNAMENT_TNM (
    TNM_ID SMALLINT AUTO_INCREMENT,
    CMP_ID SMALLINT NOT NULL,
    PRIMARY KEY (TNM_ID)
);

-- Create T_FIELD_FLD table
CREATE TABLE T_FIELD_FLD (
    FLD_ID SMALLINT AUTO_INCREMENT,
    CMP_ID SMALLINT NOT NULL,
    FLD_NAME CHAR(32) NOT NULL,
    PRIMARY KEY (FLD_ID)
);

-- Create T_USER_USR table
CREATE TABLE T_USER_USR (
    USR_ID SMALLINT AUTO_INCREMENT,
    USR_TYPE CHAR(255) NOT NULL,
    USR_MAIL CHAR(255) NOT NULL,
    USR_PASS VARCHAR(128) NOT NULL,
    USR_CREATION_DATE DATETIME NOT NULL,
    PRIMARY KEY (USR_ID)
);

-- Create T_ENCOUNTER_ENC table
CREATE TABLE T_ENCOUNTER_ENC (
    ENC_ID SMALLINT AUTO_INCREMENT,
    TNM_ID SMALLINT NULL,
    CHP_ID SMALLINT NULL,
    FLD_ID SMALLINT NOT NULL,
    TEM_ID_BLUE SMALLINT NOT NULL,
    TEM_ID_GREEN SMALLINT NOT NULL,
    ENC_STATE CHAR(255) NOT NULL,
    ENC_DATE_BEGIN DATETIME NOT NULL,
    ENC_DATE_END DATETIME NOT NULL,
    ENC_SCORE_BLUE SMALLINT NULL,
    ENC_SCORE_GREEN SMALLINT NULL,
    PRIMARY KEY (ENC_ID)
);

-- Create T_MEMBER_MBR table
CREATE TABLE T_MEMBER_MBR (
    MBR_ID SMALLINT AUTO_INCREMENT,
    TEM_ID SMALLINT NOT NULL,
    MBR_NAME CHAR(32) NOT NULL,
    MBR_SURNAME CHAR(32) NOT NULL,
    MBR_MAIL CHAR(255) NOT NULL,
    PRIMARY KEY (MBR_ID)
);


-- Add foreign key constraints
ALTER TABLE T_CHAMPIONSHIP_CHP
    ADD CONSTRAINT FK_T_CHAMPIONSHIP_CHP_T_COMPETITION_CMP FOREIGN KEY (CMP_ID) REFERENCES T_COMPETITION_CMP (CMP_ID);

ALTER TABLE T_TEAM_TEM
    ADD CONSTRAINT FK_T_TEAM_TEM_T_USER_USR FOREIGN KEY (USR_ID) REFERENCES T_USER_USR (USR_ID);

ALTER TABLE T_TEAM_TEM
    ADD CONSTRAINT FK_T_TEAM_TEM_T_COMPETITION_CMP FOREIGN KEY (CMP_ID) REFERENCES T_COMPETITION_CMP (CMP_ID);

ALTER TABLE T_TOURNAMENT_TNM
    ADD CONSTRAINT FK_T_TOURNAMENT_TNM_T_COMPETITION_CMP FOREIGN KEY (CMP_ID) REFERENCES T_COMPETITION_CMP (CMP_ID);

ALTER TABLE T_FIELD_FLD
    ADD CONSTRAINT FK_T_FIELD_FLD_T_COMPETITION_CMP FOREIGN KEY (CMP_ID) REFERENCES T_COMPETITION_CMP (CMP_ID);

ALTER TABLE T_ENCOUNTER_ENC
    ADD CONSTRAINT FK_T_ENCOUNTER_ENC_T_TOURNAMENT_TNM FOREIGN KEY (TNM_ID) REFERENCES T_TOURNAMENT_TNM (TNM_ID);

ALTER TABLE T_ENCOUNTER_ENC
    ADD CONSTRAINT FK_T_ENCOUNTER_ENC_T_TEAM_TEM FOREIGN KEY (TEM_ID_BLUE) REFERENCES T_TEAM_TEM (TEM_ID);

ALTER TABLE T_ENCOUNTER_ENC
    ADD CONSTRAINT FK_T_ENCOUNTER_ENC_T_CHAMPIONSHIP_CHP FOREIGN KEY (CHP_ID) REFERENCES T_CHAMPIONSHIP_CHP (CHP_ID);

ALTER TABLE T_ENCOUNTER_ENC
    ADD CONSTRAINT FK_T_ENCOUNTER_ENC_T_FIELD_FLD FOREIGN KEY (FLD_ID) REFERENCES T_FIELD_FLD (FLD_ID);

ALTER TABLE T_ENCOUNTER_ENC
    ADD CONSTRAINT FK_T_ENCOUNTER_ENC_T_TEAM_TEM1 FOREIGN KEY (TEM_ID_GREEN) REFERENCES T_TEAM_TEM (TEM_ID);

ALTER TABLE T_MEMBER_MBR
    ADD CONSTRAINT FK_T_MEMBER_MBR_T_TEAM_TEM FOREIGN KEY (TEM_ID) REFERENCES T_TEAM_TEM (TEM_ID);

/* added constraints  */

-- Add UNIQUE constraint for MBR_MAIL in T_MEMBER_MBR
ALTER TABLE T_MEMBER_MBR
ADD CONSTRAINT UQ_T_MEMBER_MBR_MAIL UNIQUE (MBR_MAIL);

-- Add UNIQUE constraint for USR_MAIL in T_USER_USR
ALTER TABLE T_USER_USR
ADD CONSTRAINT UQ_T_USER_USR_MAIL UNIQUE (USR_MAIL);

-- Add CHECK constraint for USR_TYPE in T_USER_USR
ALTER TABLE T_USER_USR
ADD CONSTRAINT CHK_T_USER_USR_TYPE CHECK (USR_TYPE IN ('ADMIN', 'USER'));

-- Add UNIQUE constraint for USR_ID and CMP_ID in team
ALTER TABLE T_TEAM_TEM
ADD CONSTRAINT UQ_T_TEAM_TEM_USR_ID_CMP_ID UNIQUE (USR_ID, CMP_ID);

-- Add UNIQUE constraint for TEM_NAME in T_TEAM_TEM for a competition
ALTER TABLE T_TEAM_TEM
ADD CONSTRAINT UQ_T_TEAM_TEM_NAME_CMP UNIQUE (TEM_NAME, CMP_ID);

-- Add CHECK constraint for different Blue and Green teams in T_ENCOUNTER_ENC
ALTER TABLE T_ENCOUNTER_ENC
ADD CONSTRAINT CHK_T_ENCOUNTER_ENC_DIFF_TEAMS CHECK (TEM_ID_BLUE <> TEM_ID_GREEN);

-- Add CHECK constraint for ENC_STATE in T_ENCOUNTER_ENC
ALTER TABLE T_ENCOUNTER_ENC
ADD CONSTRAINT CHK_T_ENCOUNTER_ENC_STATE CHECK (ENC_STATE IN ('PROGRAMMEE', 'CONCLUE', 'EN COURS', 'ANNULEE'));

-- Add CHECK constraint for ENC_STATE and non-null scores in T_ENCOUNTER_ENC
ALTER TABLE T_ENCOUNTER_ENC
ADD CONSTRAINT CHK_T_ENCOUNTER_ENC_CONCLUE_SCORES CHECK (
    (ENC_STATE != 'CONCLUE') OR (ENC_SCORE_BLUE IS NOT NULL AND ENC_SCORE_GREEN IS NOT NULL)
);

-- Add UNIQUE constraint for team_GREEN or team_BLUE and ENC_DATE_BEGIN and ENC_DATE_END
ALTER TABLE T_ENCOUNTER_ENC
ADD CONSTRAINT UQ_T_ENCOUNTER_ENC_TEAM_DATE UNIQUE (TEM_ID_BLUE, TEM_ID_GREEN, ENC_DATE_BEGIN, ENC_DATE_END);

-- Add UNIQUE constraint for ENC_DATE_BEGIN and ENC_DATE_END and FLD_ID
ALTER TABLE T_ENCOUNTER_ENC
ADD CONSTRAINT UQ_T_ENCOUNTER_ENC_DATE_FIELD UNIQUE (ENC_DATE_BEGIN, ENC_DATE_END, FLD_ID);

-- Add CHECK constraint for ENC_DATE_BEGIN < ENC_DATE_END in T_ENCOUNTER_ENC
ALTER TABLE T_ENCOUNTER_ENC
ADD CONSTRAINT CHK_T_ENCOUNTER_ENC_DATE_ORDER CHECK (ENC_DATE_BEGIN < ENC_DATE_END);

-- Add UNIQUE constraint for FLD_NAME in T_FIELD_FLD
ALTER TABLE T_FIELD_FLD
ADD CONSTRAINT UQ_T_FIELD_FLD_NAME UNIQUE (FLD_NAME);

-- Add UNIQUE constraint for CMP_NAME in T_COMPETITION_CMP
ALTER TABLE T_COMPETITION_CMP
ADD CONSTRAINT UQ_T_COMPETITION_CMP_NAME UNIQUE (CMP_NAME);

-- Add CHECK constraint for CMP_DATE_BEGIN < CMP_DATE_END in T_COMPETITION_CMP
ALTER TABLE T_COMPETITION_CMP
ADD CONSTRAINT CHK_T_COMPETITION_CMP_DATE_ORDER CHECK (CMP_DATE_BEGIN < CMP_DATE_END);


-- Trigger on inserting an encounter with the same field and overlapping dates and same teams and overlapping dates
DELIMITER //

CREATE TRIGGER trg_prevent_overlap_encounter
BEFORE INSERT ON T_ENCOUNTER_ENC
FOR EACH ROW
BEGIN
    DECLARE field_overlap_count INT;
    DECLARE team_overlap_count INT;

    -- Check for overlapping encounters in the same field
    SELECT COUNT(*)
    INTO field_overlap_count
    FROM T_ENCOUNTER_ENC
    WHERE FLD_ID = NEW.FLD_ID
      AND (NEW.ENC_DATE_BEGIN BETWEEN ENC_DATE_BEGIN AND ENC_DATE_END
           OR NEW.ENC_DATE_END BETWEEN ENC_DATE_BEGIN AND ENC_DATE_END
           OR ENC_DATE_BEGIN BETWEEN NEW.ENC_DATE_BEGIN AND NEW.ENC_DATE_END
           OR ENC_DATE_END BETWEEN NEW.ENC_DATE_BEGIN AND NEW.ENC_DATE_END);

    -- Check for overlapping encounters with the same teams (either blue or green)
    SELECT COUNT(*)
    INTO team_overlap_count
    FROM T_ENCOUNTER_ENC
    WHERE (TEM_ID_BLUE = NEW.TEM_ID_BLUE OR TEM_ID_GREEN = NEW.TEM_ID_GREEN
           OR TEM_ID_BLUE = NEW.TEM_ID_GREEN OR TEM_ID_GREEN = NEW.TEM_ID_BLUE)
      AND (NEW.ENC_DATE_BEGIN BETWEEN ENC_DATE_BEGIN AND ENC_DATE_END
           OR NEW.ENC_DATE_END BETWEEN ENC_DATE_BEGIN AND ENC_DATE_END
           OR ENC_DATE_BEGIN BETWEEN NEW.ENC_DATE_BEGIN AND NEW.ENC_DATE_END
           OR ENC_DATE_END BETWEEN NEW.ENC_DATE_BEGIN AND NEW.ENC_DATE_END);

    -- If any overlap is detected, raise an error
    IF field_overlap_count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot insert encounter: overlapping dates in the same field.';
    ELSEIF team_overlap_count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot insert encounter: overlapping dates with the same teams.';
    END IF;
END;
//

DELIMITER ;


-- Trigger on inserting a competition with overlapping dates
DELIMITER //

CREATE TRIGGER trg_prevent_overlap_competition
BEFORE INSERT ON T_COMPETITION_CMP
FOR EACH ROW
BEGIN
    DECLARE overlap_count INT;

    -- Check for overlapping competitions
    SELECT COUNT(*)
    INTO overlap_count
    FROM T_COMPETITION_CMP
    WHERE (NEW.CMP_DATE_BEGIN BETWEEN CMP_DATE_BEGIN AND CMP_DATE_END)
       OR (NEW.CMP_DATE_END BETWEEN CMP_DATE_BEGIN AND CMP_DATE_END)
       OR (CMP_DATE_BEGIN BETWEEN NEW.CMP_DATE_BEGIN AND NEW.CMP_DATE_END)
       OR (CMP_DATE_END BETWEEN NEW.CMP_DATE_BEGIN AND NEW.CMP_DATE_END);

    -- If overlap exists, raise an error
    IF overlap_count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot insert competition: overlapping dates with an existing competition.';
    END IF;
END;
//

DELIMITER ;


-- Trigger for a maximum of 16 encounters in a tournament
DELIMITER //

CREATE TRIGGER trg_max_encounters_per_tournament
BEFORE INSERT ON T_ENCOUNTER_ENC
FOR EACH ROW
BEGIN
    DECLARE encounter_count INT;

    -- Count the number of encounters already in the same tournament
    SELECT COUNT(*)
    INTO encounter_count
    FROM T_ENCOUNTER_ENC
    WHERE TNM_ID = NEW.TNM_ID;

    -- Check if the count exceeds the limit of 16
    IF encounter_count >= 16 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot insert encounter: a tournament cannot have more than 16 encounters.';
    END IF;
END;
//

DELIMITER ;


